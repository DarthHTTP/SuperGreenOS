let config = {}

{{< utils.js}}

const updateHeader = async function() {
  const device_name = await fetchParam('s', 'DEVICE_NAME')
  updateDiv('device_name', device_name)

  const state = await fetchParam('i', 'STATE')
  if (state == 0) {
    updateDiv('state', 'First run')
  } else if (state == 2) {
    updateDiv('state', 'Running')
  }

  const wifi_status = await fetchParam('i', 'WIFI_STATUS')
  if (wifi_status == 5) {
    const ip = await fetchParam('s', 'WIFI_IP')
    updateDiv('wifi_status', `AP (${ip})`)
  } else if (wifi_status == 3) {
    const ip = await fetchParam('s', 'WIFI_IP')
    updateDiv('wifi_status', `STA (${ip})`)
  } else {
    updateDiv('wifi_status', '-')
  }
}

window.onSubmitBoxParam = async function(id, keyId) {
  const key = config.keys[keyId]
  let value = document.getElementById(`value_${key.caps_name}`).value
  document.getElementById(`box_param_${key.caps_name}`).classList.add('param_loading')
  await updateParam(key.integer ? 'i' : 's', `${key.caps_name}`, value)
  value = await fetchParam(key.integer ? 'i' : 's', key.caps_name)
  document.getElementById(`value_${key.caps_name}`).value = value
  document.getElementById(`box_param_${key.caps_name}`).classList.remove('param_loading')
}

const loadBoxParams = async function(id) {
  let p = Promise.resolve()
  for (let i = 0; i < config.keys.length; ++i) {
    const key = config.keys[i]
    if (!key.box || key.box.index != id || !key.http) continue
    const np = p.then(((keyId, key) => async () => {
      const value = await fetchParam(key.integer ? 'i' : 's', key.caps_name)
      document.getElementById(`box_param_${key.caps_name}`).classList.remove('param_loading')
      const el = document.getElementById(`value_${key.caps_name}`)
      if (el.value) {
        el.value = value
      } else {
        el.innerText = value
      }
    })(i, key))
    if (i % 3 == 0) {
      p = np;
    }
  }
  return p
}

const renderBoxReadonly = async function(id) {
  let html = []
  for (let i = 0; i < config.keys.length; ++i) {
    const key = config.keys[i]
    if (!key.box || key.box.index != id || !key.http || key.http.write) continue
    // replace with mustache template
    html.push(`<div class='box_param param_loading' id='box_param_${key.caps_name}'>
          <b>${key.box.param}:</b>&nbsp;<span id='value_${key.caps_name}'>-</span>
      </div>`)
  }
  document.getElementById('box_readonly_0').innerHTML = html.slice(0, html.length / 2).join('')
  document.getElementById('box_readonly_1').innerHTML = html.slice(html.length / 2).join('')
}

const renderBoxAdvance = async function(id) {
  let html = []
  for (let i = 0; i < config.keys.length; ++i) {
    const key = config.keys[i]
    if (!key.box || key.box.index != id || !key.http || !key.http.write) continue
    // replace with mustache template
    html.push(`<div class='param_loading' id='box_param_${key.caps_name}'>
        <form class='box_param' onSubmit='onSubmitBoxParam(${id}, ${i}); return false'>
          <label for='${key.caps_name}'>${key.box.param}</label>
          <input type='text' value='-' name='${key.caps_name}' id='value_${key.caps_name}' />
        </form>

      </div>`)
  }
  document.getElementById('box_advance_0').innerHTML = html.slice(0, html.length / 2).join('')
  document.getElementById('box_advance_1').innerHTML = html.slice(html.length / 2).join('')
}

window.renderBox = async function(id) {
  renderBoxReadonly(id)
  renderBoxAdvance(id)
  loadBoxParams(id);
}

async function start() {
  config = await fetchConfig()
  updateHeader()
  renderBox(0)
}

start()
