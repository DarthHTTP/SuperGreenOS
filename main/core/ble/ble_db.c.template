/*
 * Copyright (C) 2018  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "ble_db.h"

#include "string.h"

#include "../include_modules.h"
#include "../log/log.h"
#include "../ble/ble_utils.h"
#include "../kv/kv.h"

static const uint16_t GATTS_SERVICE_UUID      = 0x00FF;

{{#keys}}
{{#ble}}
const uint8_t {{name}}_UUID[ESP_UUID_LEN_128] = {{uuid}};
{{/ble}}
{{/keys}}

const esp_gatts_attr_db_t gatt_db[HRS_IDX_NB] = {
  {{=||| |||=}}

  [IDX_SVC]    =
  {{ESP_GATT_AUTO_RSP}, {ESP_UUID_LEN_16, (uint8_t *)&primary_service_uuid, ESP_GATT_PERM_READ,
    sizeof(uint16_t), sizeof(GATTS_SERVICE_UUID), (uint8_t *)&GATTS_SERVICE_UUID}},

  |||={{ }}=|||
  /*
   * [GENERATED]
   */

  {{#keys}}
    {{#ble}}
    R{{#ble.write}}W{{/ble.write}}_{{#integer}}I{{/integer}}{{#string}}STR{{/string}}{{#ble.notify}}_NOTIFIABLE{{/ble.notify}}_CHAR({{name}})
    {{/ble}}
  {{/keys}}

  /*
   * [/GENERATED]
   */
};

void on_write(esp_ble_gatts_cb_param_t *param) {
  /*
   * [GENERATED]
   */
  
  {{#keys}}
    {{#ble.write}}
      {{^ble.first}} else {{/ble.first}}if (param->write.handle == handle_table[IDX_VALUE({{name}})]) {
        {{#integer}}
          uint32_t val = *(uint32_t *)(&param->write.value[0])
          {{^ble.manual}}
            seti({{name}}, val);
          {{/ble.manual}}
          {{#write_cb}}
            {{write_cb}}(val)
          {{/write_cb}}
        {{/integer}}
        {{#string}}
            char val[MAX_KVALUE_SIZE] = {0};
            strncpy(val, (const char *)param->write.value, param->write.len);
          {{^ble.manual}}
            setstr({{name}}, val);
          {{/ble.manual}}
          {{#write_cb}}
            {{write_cb}}(val);
          {{/write_cb}}
        {{/string}}
      }
    {{/ble.write}}
  {{/keys}}

  /*
   * [/GENERATED]
   */
}

void on_read(esp_ble_gatts_cb_param_t *param) {
}
